import pandas as pd

localrules:
    # vcf_and_bed_to_bimbam,
    gemma_make_covar,
    # gemma_top_eqtls,
    gemma_pve,


rule all:
    input:
        # expand("lm/NAcc.{chrn}.assoc.txt", chrn=range(1, 21)),
        # expand("kinship/{chrn}.cXX.txt", chrn=range(1, 21)),
        # expand("lmm/NAcc.{chrn}.assoc.txt", chrn=range(1, 21)),
        "NAcc.lm.assoc.txt.gz",
        "NAcc.lmm.assoc.txt.gz",
        # expand("pve_cov/NAcc.{chrn}.log.txt", chrn=range(1, 21)),
        "NAcc.grm_pve.pve.txt",


rule vcf_and_bed_to_bimbam:
    input:
        vcf = "../genotype/P50.rnaseq.88.unpruned.vcf.gz",
        bed = "../expression/ensembl-gene_inv-quant_Acbc.bed.gz"
    output:
        geno = "geno.txt.gz",
        pheno = "pheno.txt",
        genes = "genes.txt",
        snps = "snps.txt",
        samples = "samples.txt", # Just for reference
    params:
        geno = "geno.txt"
    # conda:
    #     "../../../envs/biopython.yaml"
    shell:
        """
        python3 ~/br/src/vcf_and_bed_to_bimbam.py \
            {input.vcf} {input.bed} \
            {params.geno} {output.pheno} {output.genes} {output.snps} \
            {output.samples}
        gzip {params.geno}
        """


rule gemma_make_covar:
    input:
        covar = "../tensorqtl/NQCT.combined_covariates.txt",
        samples = "samples.txt",
    output:
        covar = "covar.txt",
        names = "covar_names.txt",
    run:
        samples = list(pd.read_csv(input.samples, header=None)[0])
        d = pd.read_csv(input.covar, sep="\t", dtype=str)
        # Remove genotype covariates, which could mess up LMM:
        # d = d[[x for x in list(d.columns) if x not in ["ACI", "BN", "BUF", "F344", "M520", "MR", "WN", "WKY"]]]
        d = d.loc[~d["ID"].isin(["ACI", "BN", "BUF", "F344", "M520", "MR", "WN", "WKY"]), :]
        d = d.rename(columns={"ID": "intercept"}) # just to have in names file
        d["intercept"].to_csv(output.names, index=False)
        # d = d[["intercept"] + samples].T
        d = d[samples].T
        print(list(d.columns))
        d.insert(0, "intercept", 1)
        d.to_csv(output.covar, sep="\t", index=False, header=False)


rule gemma_kinship_loco:
    input:
        geno = "geno.txt.gz",
        pheno = "pheno.txt",
    output:
        matrix = "kinship/{chrn}.cXX.txt",
        log = "kinship/{chrn}.log.txt",
    params:
        outdir = "kinship",
        tmpgeno = "kinship/geno_loco.{chrn}.txt"
    # conda:
    #     "../../../envs/gemma.yaml"
    shell:
        """
        zcat {input.geno} | grep -v "^chr{wildcards.chrn}:" > {params.tmpgeno}
        gemma -gk \
            -g {params.tmpgeno} \
            -p {input.pheno} \
            -outdir {params.outdir} \
            -o {wildcards.chrn}
        rm {params.tmpgeno}
        """


rule gemma_eqtl_lm:
    input:
        geno = "geno.txt.gz",
        pheno = "pheno.txt",
        covar = "covar.txt",
        snps = "snps.txt",
        genes = "genes.txt",
    output:
        assoc = "lm/NAcc.{chrn}.assoc.txt",
        log = "lm/NAcc.{chrn}.log.txt",
    # conda:
    #     "../../../envs/gemma.yaml"
    resources:
        walltime = 12,
        cpus = 16
    shell:
        """
        python3 ~/br/src/gemma_eqtls.py \
            {input.geno} \
            {input.pheno} \
            {input.snps} \
            {input.genes} \
            {output.assoc} \
            --covar {input.covar} \
            --log {output.log} \
            --chr {wildcards.chrn} \
            --cis_only \
            --jobs {resources.cpus}
        """


rule gemma_eqtl_lmm:
    input:
        geno = "geno.txt.gz",
        pheno = "pheno.txt",
        covar = "covar.txt",
        snps = "snps.txt",
        genes = "genes.txt",
        kinship = "kinship/{chrn}.cXX.txt"
    output:
        assoc = "lmm/NAcc.{chrn}.assoc.txt",
        log = "lmm/NAcc.{chrn}.log.txt",
    # conda:
    #     "../../../envs/gemma.yaml"
    resources:
        walltime = 24,
        mem_mb = 20000,
        cpus = 16
    shell:
        """
        python3 ~/br/src/gemma_eqtls.py \
            {input.geno} \
            {input.pheno} \
            {input.snps} \
            {input.genes} \
            {output.assoc} \
            --covar {input.covar} \
            --log {output.log} \
            --chr {wildcards.chrn} \
            --kinship {input.kinship} \
            --cis_only \
            --jobs {resources.cpus}
        """


rule gemma_top_eqtls:
    input:
        expand("{{mode}}/NAcc.{chrn}.assoc.txt", chrn=range(1, 21))
    output:
        "NAcc.{mode}.assoc.txt.gz"
    shell:
        "python3 ~/br/src/gemma_top_eqtls.py {input} -p p_wald -o {output}"


rule gemma_pve:
    """I believe for lmm mode output this is PVE of GRM + specificied SNPs, unless GEMMA was run with GRM (and covars?) only."""
    input:
        expand("{{version}}/NAcc.{chrn}.log.txt", chrn=range(1, 21))
    output:
        "NAcc.{version}.pve.txt"
    shell:
        "python3 ~/br/src/gemma_parse_lmm_logs.py {input} -o {output}"


rule gemma_grm_pve:
    """Run GEMMA without SNPs to get PVE for GRM only."""
    input:
        pheno = "pheno.txt",
        # covar = "covar.txt",
        genes = "genes.txt",
        kinship = "kinship/{chrn}.cXX.txt"
    output:
        "grm_pve/NAcc.{chrn}.log.txt",
    # conda:
    #     "../../../envs/gemma.yaml"
    resources:
        cpus = 16
    shell:
            # --covar {input.covar} \
        """
        python3 ~/br/src/gemma_pve.py \
            {input.pheno} \
            {input.genes} \
            {output} \
            --chr {wildcards.chrn} \
            --kinship {input.kinship} \
            --jobs {resources.cpus}
        """


# rule gemma_cis_pve:
#     """Run GEMMA with gene-specific cis-window GRM and no SNPs to get PVE (heritability)."""
#     input:
#         geno = "geno.txt.gz",
#         pheno = "pheno.txt",
#         snps = "snps.txt",
#         genes = "genes.txt",
#     output:
#         "NAcc.cis_pve.txt"
#     params:
#         tmpdir = "cis_pve",
#         log = "cis_pve/NAcc.log.txt",
#     resources:
#         walltime = 12,
#         cpus = 16
#     shell:
#         """
#         python3 ~/br/src/gemma_cis_pve.py \
#             {input.geno} \
#             {input.pheno} \
#             {input.snps} \
#             {input.genes} \
#             {params.log} \
#             {params.tmpdir} \
#             --jobs {resources.cpus}
#         python3 ~/br/src/gemma_parse_lmm_logs.py {params.log} -o {output}
#         """


#######################################
## Etc (not used for paper analysis) ##
#######################################

rule gemma_eqtl_lm_shuf:
    input:
        geno = "geno.txt.gz",
        pheno = "pheno_shuf.txt",
        snps = "snps.txt",
        genes = "genes.txt",
    output:
        assoc = "lm_shuf/NAcc.{chrn}.assoc.txt",
        log = "lm_shuf/NAcc.{chrn}.log.txt",
    # conda:
    #     "../../../envs/gemma.yaml"
    resources:
        walltime = 12,
        cpus = 16
    shell:
        """
        python3 ~/br/src/gemma_eqtls.py \
            {input.geno} \
            {input.pheno} \
            {input.snps} \
            {input.genes} \
            {output.assoc} \
            --log {output.log} \
            --chr {wildcards.chrn} \
            --jobs 16
        """


rule gemma_eqtl_lmm_shuf:
    input:
        geno = "geno.txt.gz",
        pheno = "pheno_shuf.txt",
        snps = "snps.txt",
        genes = "genes.txt",
        kinship = "kinship/{chrn}.cXX.txt"
    output:
        assoc = "lmm_shuf/NAcc.{chrn}.assoc.txt",
        log = "lmm_shuf/NAcc.{chrn}.log.txt",
    # conda:
    #     "../../../envs/gemma.yaml"
    resources:
        walltime = 12,
        mem_mb = 20000,
        cpus = 16
    shell:
        """
        python3 ~/br/src/gemma_eqtls.py \
            {input.geno} \
            {input.pheno} \
            {input.snps} \
            {input.genes} \
            {output.assoc} \
            --log {output.log} \
            --chr {wildcards.chrn} \
            --kinship {input.kinship} \
            --jobs 16
        """


rule gemma_random_pairs:
    input:
        expand("{mode}/NAcc.{chrn}.assoc.txt",
               mode=["lm", "lmm"],
               chrn=range(1, 21))
    output:
        "NAcc.random_pairs.txt",
    shell:
        "python3 ~/br/src/gemma_random_eqtls.py"


# rule eigenMT:
#     input:
#         ""
#     output:
#         ""
#     shell:
#     # --window 50 from https://github.com/chen42/HS_brain_eQTL/blob/master/eigenMT/run_eigenMT.sh
#         """
#         python eigenMT.py --chrom {wildcards.chrn} \
#         --QTL /gemma_loco/output_loco/OF/OF_gemma_chr${i}_results.txt \
#         --GEN OF_genotype_chr${i}.txt \
#         --GENPOS chr${i}_gen_pos.txt \
#         --PHEPOS rn6_gene_pos.tab \
#         --window 50 \
#         --OUT chr${i}_eigenMT_win50_result.txt
#         """
